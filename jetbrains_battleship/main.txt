import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Main {

    public static void main(String[] args) {
        // Write your code here
        char[] elementofgame = new char[100];
        List Aircraft_list = new ArrayList();
        List Battleship_list = new ArrayList();
        List Submarine_list = new ArrayList();
        List Cruiser_list = new ArrayList();
        List Destroyer_list = new ArrayList();

        char[] elementofgame1 = new char[100];
        List Aircraft_list1 = new ArrayList();
        List Battleship_list1 = new ArrayList();
        List Submarine_list1 = new ArrayList();
        List Cruiser_list1 = new ArrayList();
        List Destroyer_list1 = new ArrayList();

        System.out.println("Player 1, place your ships on the game field");
        displaymap.initialization(elementofgame);
        displaymap.display(elementofgame);
        addBattleShip.addKindShip(elementofgame,5,"Aircraft Carrier",Aircraft_list);
        System.out.println(Aircraft_list);
        addBattleShip.addKindShip(elementofgame,4,"Battleship",Battleship_list);
        System.out.println(Battleship_list);
        addBattleShip.addKindShip(elementofgame,3,"Submarine",Submarine_list);
        System.out.println(Submarine_list);
        addBattleShip.addKindShip(elementofgame,3,"Cruiser",Cruiser_list);
        System.out.println(Cruiser_list);
        addBattleShip.addKindShip(elementofgame,2,"Destroyer",Destroyer_list);
        System.out.println(Destroyer_list);
        promptEnterKey();

        System.out.println("Player 2, place your ships on the game field");
        displaymap.initialization(elementofgame1);
        addBattleShip.addKindShip(elementofgame1,5,"Aircraft Carrier",Aircraft_list1);
        addBattleShip.addKindShip(elementofgame1,4,"Battleship",Battleship_list1);
        addBattleShip.addKindShip(elementofgame1,3,"Submarine",Submarine_list1);
        addBattleShip.addKindShip(elementofgame1,3,"Cruiser",Cruiser_list1);
        addBattleShip.addKindShip(elementofgame1,2,"Destroyer",Destroyer_list1);
        promptEnterKey();




        while (true){

            displaymap.displayFromEnemy(elementofgame1);
            System.out.println("---------------------");
            displaymap.display(elementofgame);
            System.out.println("Player 1, it's your turn:");
            Battle.shot(Aircraft_list1,Battleship_list1,Submarine_list1,Cruiser_list1,Destroyer_list1,elementofgame1);
            if(Aircraft_list1.isEmpty()&&Battleship_list1.isEmpty()&&Submarine_list1.isEmpty()&&Cruiser_list1.isEmpty()&&Destroyer_list1.isEmpty()){
                System.out.println("You sank the last ship. You won. Congratulations!");
                break;
            }
            promptEnterKey();

            displaymap.displayFromEnemy(elementofgame);
            System.out.println("---------------------");
            displaymap.display(elementofgame1);
            System.out.println("Player 2, it's your turn:");
            Battle.shot(Aircraft_list,Battleship_list,Submarine_list,Cruiser_list,Destroyer_list,elementofgame);
            if(Aircraft_list.isEmpty()&&Battleship_list.isEmpty()&&Submarine_list.isEmpty()&&Cruiser_list.isEmpty()&&Destroyer_list.isEmpty()){
                System.out.println("You sank the last ship. You won. Congratulations!");
                break;
            }
            promptEnterKey();

        }

    }
    public static void promptEnterKey() {
        System.out.println("Press Enter and pass the move to another player");
        try {
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class shiplist{

}

class displaymap {
    static void initialization(char[] elementofgame){
        for (int i=0;i<100;i++){
            elementofgame[i]='~';
        }
    }

    static void display(char[] elementofgame){
        System.out.println("  1 2 3 4 5 6 7 8 9 10");
        char note = 'A';

        for (int i=0;i<10;i++){
            for (int j=0;j<=10;j++){
                if (j==0){
                    System.out.print((char)note+" ");
                }
                else {
                    System.out.print(elementofgame[10*i+j-1]+" ");
                }
            }
            note++;
            System.out.print('\n');

        }
    }

    static void displayFromEnemy(char[] elementofgame){
        System.out.println("  1 2 3 4 5 6 7 8 9 10");
        char note = 'A';

        for (int i=0;i<10;i++){
            for (int j=0;j<=10;j++){
                if (j==0){
                    System.out.print((char)note+" ");
                }
                else {
                    if (elementofgame[10*i+j-1]!='X' && elementofgame[10*i+j-1]!='M') {
                        System.out.print('~' + " ");
                    }
                    else {
                        System.out.print(elementofgame[10 * i + j - 1] + " ");
                    }
                }
            }
            note++;
            System.out.print('\n');

        }
    }
}

class addBattleShip{
    static void addKindShip(char[] elementofgame,int longOfShip ,String typeofShip,List list){
        System.out.printf("Enter the coordinates of the %s (%d cells):\n",typeofShip,longOfShip);
        while (true){
            Scanner scanner = new Scanner(System.in);
            String start=scanner.next();
            String end=scanner.next();
            int returnnum= addship.addthings(elementofgame,start,end,longOfShip,typeofShip,list);
            if (returnnum==0){
                displaymap.display(elementofgame);
                break;
            }
        }
    }
}

class addship{
    static int addthings(char[] elementofgame,String start,String end,int longOfShip,String typeOfShip,List list){
        int[] startpoint = coorder.coorderinate(start);
        int[] endpoint=coorder.coorderinate(end);
        boolean normalstatus=(startpoint[0]==endpoint[0]&&Math.abs(startpoint[1]-endpoint[1])==longOfShip-1)||(startpoint[1]==endpoint[1]&&Math.abs(startpoint[0]-endpoint[0])==longOfShip-1);
        boolean lengtherror=(startpoint[0]==endpoint[0]&&Math.abs(startpoint[1]-endpoint[1])!=longOfShip-1)||(startpoint[1]==endpoint[1]&&Math.abs(startpoint[0]-endpoint[0])!=longOfShip-1);
        boolean Wronglocation=!((startpoint[0]==endpoint[0])||(startpoint[1]==endpoint[1]));
        if (normalstatus){
            if (checkIFClose(elementofgame,start,end)) {
                int startarray = coorder.transfer(start);
                int endarray = coorder.transfer(end);
                int smaller = Math.min(startarray, endarray);
                int greater = Math.max(startarray, endarray);
                if (greater - smaller < 10) {
                    for (int i = smaller; i <= greater; i++) {
                        elementofgame[i] = 'O';
                        list.add(i);
                    }
                    return 0;
                } else {
                    for (int i = smaller; i <= greater; i += 10) {
                        elementofgame[i] = 'O';
                        list.add(i);
                    }
                    return 0;
                }
            }
            else {
                System.out.println("Error! You placed it too close to another one. Try again:");
                return -1;
            }
        }

        else if (Wronglocation){
            System.out.println("Error! Wrong ship location! Try again:");
            return -1;
        }
        else if (lengtherror){
            System.out.printf("Error! Wrong length of the %s! Try again:\n",typeOfShip);
            return -1;
        }
        return -1;

    }
    static boolean checkIFClose(char[] elementofgame,String start,String end){
        int startarray=coorder.transfer(start);
        int endarray=coorder.transfer(end);
        int smaller=Math.min(startarray,endarray);
        int greater=Math.max(startarray,endarray);
        boolean returnstauts =true;
        if (greater-smaller<10){
            for (int i = smaller;i<=greater;i++){
                if(!checkOnepoint(elementofgame,i)){
                    returnstauts=false;
                    break;
                }
            }
        }
        else {
            for(int i = smaller;i<=greater;i+=10){
                if(!checkOnepoint(elementofgame,i)){
                    returnstauts=false;
                    break;
                }
            }
        }
        return returnstauts;

    }

    static boolean checkOnepoint(char[] elementofgame,int i){
        boolean returnstatus = elementofgame[i]!='O';
        boolean returnstatusADD1 =true;
        boolean returnstatusMINUS1 = true;
        boolean returnstatusADD10 = true;
        boolean returnstatusMINUS10 = true;
        if ((i+1)/10==(i/10)&&i+1<=99){
            returnstatusADD1 = (elementofgame[i+1]!='O');
        }
        if ((i-1)/10==(i/10)&&i-1>=0){
            returnstatusMINUS1 = (elementofgame[i-1]!='O');
        }
        if (i+10<100){
            returnstatusADD10 = (elementofgame[i+10]!='O');
        }
        if (i-10>=0){
            returnstatusMINUS10=(elementofgame[i-10]!='O');
        }
        return returnstatus&&returnstatusADD1&&returnstatusMINUS1&&returnstatusADD10&&returnstatusMINUS10;
    }

}

class coorder{
    static int transfer(String input){
        char ytestchar = input.substring(0,1).charAt(0);
        int ytest=ytestchar-'A';
        //System.out.println(ytest);
        int xtest=Integer.parseInt(input.substring(1,input.length()))-1;
        //System.out.println(xtest);
        return xtest+ytest*10;
    }
    static int[] coorderinate(String input){
        char ytestchar = input.substring(0,1).charAt(0);
        int ytest=ytestchar-'A';
        int xtest=Integer.parseInt(input.substring(1,input.length()))-1;
        int[] coord = {xtest,ytest};
        return coord;
    }

    static boolean checktheinput(String input){
        char ytestchar = input.substring(0,1).charAt(0);
        //System.out.println(ytestchar);
        int xtest=Integer.parseInt(input.substring(1,input.length()));
        //System.out.println(xtest);
        boolean correctinput = (ytestchar>='A'&&ytestchar<='J')&&(xtest>=1&&xtest<=10);
        boolean returncode = false;
        if(correctinput){
            returncode=true;
        }
        return returncode;
    }
}

class Battle{
    static void shot(List Aircraft_list, List Battleship_list, List Submarine_list, List Cruiser_list,List Destroyer_list,char[] elementofgame){
        //System.out.println("Take a shot!");
        Scanner scanner = new Scanner(System.in);
        String shotpoint=scanner.next();
        while (true){
            if (coorder.checktheinput(shotpoint)){
                break;
            }
            else {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                shotpoint=scanner.next();
            }
        }
        //System.out.println(elementofgame[coorder.transfer(shotpoint)]);
        if (elementofgame[coorder.transfer(shotpoint)]=='O') {
            elementofgame[coorder.transfer(shotpoint)]='X';
//            displaymap.displayFromEnemy(elementofgame);
            checkifsunkaShip(Aircraft_list,Battleship_list,Submarine_list,Cruiser_list,Destroyer_list,coorder.transfer(shotpoint));
            System.out.println("You hit a ship!");
        }
        else if (elementofgame[coorder.transfer(shotpoint)]=='~'){
            elementofgame[coorder.transfer(shotpoint)]='M';
//            displaymap.displayFromEnemy(elementofgame);
            System.out.println("You missed!");
        }
        else if (elementofgame[coorder.transfer(shotpoint)]=='X'||elementofgame[coorder.transfer(shotpoint)]=='M'){
//            displaymap.displayFromEnemy(elementofgame);
            System.out.println("You missed!");
        }
    }
//    static void checkifsunkaShip(List Aircraft_list, List Battleship_list, List Submarine_list, List Cruiser_list,List Destroyer_list,int shotpoint){
//        if (Aircraft_list.size()!=0&&Aircraft_list.indexOf(shotpoint)!=-1){
//            changeList.remove(shotpoint,Aircraft_list);
//            if (Aircraft_list.size()==0){
//                System.out.println("You sank a ship! Specify a new target:");
//            }
//        }
//        System.out.println(Aircraft_list);
//
//    }

    static void checkifsunkaShip(List Aircraft_list, List Battleship_list, List Submarine_list, List Cruiser_list,List Destroyer_list,int shotpoint){
        if (Aircraft_list.size()!=0&&Aircraft_list.indexOf(shotpoint)!=-1){
            changeList.remove(shotpoint,Aircraft_list);
            if (Aircraft_list.size()==0){
                System.out.println("You sank a ship! Specify a new target:");
            }
        }
        //System.out.println(Aircraft_list);

        if (Battleship_list.size()!=0&& Battleship_list.indexOf(shotpoint)!=-1){
            changeList.remove(shotpoint,Battleship_list);
            if (Battleship_list.size()==0){
                System.out.println("You sank a ship! Specify a new target:");
            }
        }
        //System.out.println(Battleship_list);


        if (Submarine_list.size()!=0&& Submarine_list.indexOf(shotpoint)!=-1){
            changeList.remove(shotpoint,Submarine_list);
            if (Submarine_list.size()==0){
                System.out.println("You sank a ship! Specify a new target:");
            }
        }
        //System.out.println(Submarine_list);

        if (Cruiser_list.size()!=0&& Cruiser_list.indexOf(shotpoint)!=-1){
            changeList.remove(shotpoint,Cruiser_list);
            if (Cruiser_list.size()==0){
                System.out.println("You sank a ship! Specify a new target:");
            }
        }
        //System.out.println(Cruiser_list);

        if (Destroyer_list.size()!=0&& Destroyer_list.indexOf(shotpoint)!=-1){
            changeList.remove(shotpoint,Destroyer_list);
            if (Destroyer_list.size()==0){
                System.out.println("You sank a ship! Specify a new target:");
            }
        }
        //System.out.println(Destroyer_list);
    }

}

class changeList{
    static void remove(int num,List list){
        for(int i=0;i<list.size();i++){
            if(list.get(i).equals(num))
                list.remove(i);
        }
    }
}
